#!/usr/bin/env perl
=head1 NAME

  telegraf-discover - discover db process and change telegraf configure file

=cut

=head1

  use telegraf-discover --help for more info.
  options:
    conf:    telegraf configure file, default is 
                /etc/telegraf/telegraf.conf;
    confd:   telegraf configure directory, default is
                /etc/telegraf/telegraf.d;
    disf:    ini style configure file to store db user and pass, 
                default is /etc/telegraf/discover.conf;
    update:  whether generate sub configure file or not,
                default is /etc/telegraf/telegraf.d/<db>-auto.conf;
    verbose: print more messages.


    the sample of the `disf` file, multiple database maybe running in 
    one host, we'll inherit default pass if not set instance pass:

      # /etc/telegraf/discover.conf
      [mysql]
      user=monitor  # can not change by instance
      pass=xxxxxx   # default pass
      3306=111111   # pass for 3306 port
      3307=222222   # pass for 3307 port
      ignore=3301,3303 # ignore 3301 and 3303 port

      [postgresql]
      is_local=1
      user=postgres

      [redis]
      pass=xxxxx # default pass
      6379=xxxxx    # pass for 6379 port

      [memcached]
      ignore=11212

      [dns_query]
      ignore = 0
      domains = www.wanmei.com

      [megacli]
      ignore = 0   # enable megacli monitor

      [iptables]
      ignore = 0   # enable iptables monitor

     Note: 
       Currently only the following types are supported:
          memcached, mysql, mongodb, redis, pika
=cut

use strict;
use warnings;
use POSIX qw(strftime);
use Getopt::Long;
use Carp;
use encoding "utf8";

BEGIN {
   $INC{$_} = __FILE__ for map { (my $pkg = "$_.pm") =~ s!::!/!g; $pkg } (qw(
      Utils
      Disconf
   ));
}

my($update,$verbose,$help);
my $conf  = "/etc/telegraf/telegraf.conf";
my $confd = "/etc/telegraf/telegraf.d";
my $disf  = "/etc/telegraf/discover.conf";

GetOptions(
  "conf=s"   => \$conf,
  "confd=s"  => \$confd,
  "disf=s"   => \$disf,
  "update!"  => \$update,
  "verbose!" => \$verbose,
  "help|h"   => \$help,
) or die "error:$!";

if ($help) {
  usage($0);
}

sub usage {
  my $name = shift;
  system("perldoc -T $name");
  exit 0;
}

Utils::create_dir_if("$confd") 
  or croak "create $confd error and $confd is not exist";

my $disconf = Disconf->new( (update => $update) );
my $results = $disconf->get_server_list();
my $sects   = Utils::parsecfg($disf);
$| = 1; # enforce flush for print

unless (defined $results) {
  Utils::time_print("error - cann't get listen port lists, exit ...");
  exit 1;
}

my $is_trigger = 0;

# ensure telegraf process is running, conf maybe changed 
# but not restart service
my $is_alive = $disconf->is_telegraf_alive();
if ($is_alive) {
  Utils::time_print("ok - telegraf is running");
  if ($disconf->is_telegraf_conf_change($conf)) {
    Utils::time_print("warn - conf was changed but not restart telegraf!");
    $is_trigger++;
  }

  # detect graphite connection, 
  # telegraf maybe produce many warning log
  if ($disconf->is_graphite_connection_abnormal($conf)) {
    Utils::time_print("warn - graphite connection abnormal, restart telegraf!");
    $is_trigger++;
  }

}
else {
  Utils::time_print("error - telegraf is not running");
}

# detect and generate sub conf file for listen service
foreach my $type (keys %{$results->{listen}}) {
  next unless $disconf->is_support($type);

  my $i = $disconf->gen_conf_for_listen(
            $confd, $type,
            $results->{listen}->{$type}, 
            $sects->{$type},
          );
  $is_trigger += $i;
}

# detect and generate sub conf file for non_listen service
foreach my $type (keys %{$results->{non_listen}}) {
  next unless $disconf->is_support($type);

  my $i = $disconf->gen_conf_for_non_listen(
            $confd, $type,
            $sects->{$type},
  );

  $is_trigger += $i;
}

# detect and generate sub conf file for one_enable service
foreach my $type (keys %{$results->{one_enable}}) {
  next unless $disconf->is_support($type);

  my $i = $disconf->gen_conf_for_one_enable(
            $confd, $type,
            $sects->{$type},
  );

  $is_trigger += $i;
}

# should restart telegraf service
if ($is_trigger > 0) {
  Utils::time_print("need restart telegraf") if $verbose;
  if ($update) {
    my $cmd = "service telegraf restart";
    my($high, $low) = Utils::exec_system("$cmd");
    sleep 1; # wait a moment

    if ($high != 0 || $low != 0) {
      Utils::time_print("error - $cmd execute error! high: $high, low: $low");
    }
    else {
      if ($disconf->is_telegraf_alive()) {
        Utils::time_print("ok - $cmd execute ok, and process is running!");
      }
      else {
        Utils::time_print("error - $cmd execute ok, but process is not running!");
      }
    }
  }
}

=head1 AUTHOR

zhe.chen <chenzhe07@gmail.com>

=head1 CHANGELOG

v0.1.0 version

=cut

# ####################################################################
# Utils packages
# ####################################################################
package Utils;
# common utils methods
# <chenzhe07@gmail.com>
use strict;
use warnings FATAL => 'all';
use English qw(-no_match_vars);
use POSIX qw(strftime);
use File::Path;
use File::Find;
use File::Basename;
use IO::Socket::INET;
use Carp;

use vars qw($VERSION);
our $VERSION = '0.10';

sub create_dir_if {
  my $dir  = shift;
  if (!-d $dir) {
    eval {
      mkpath($dir);
    };
    if ($@) {
      my $e = $@;
      undef $@;
      unless (-d $dir) {
        carp "failed to create dir:$dir:$e";
        return 0;
      }
    }
  }
  return 1;
}

sub create_cnf_if {
  my $cnf   = shift;
  my $res   = shift;
  my $force = shift || 0;

  if (-e $cnf && !$force) {
    return 0;
  }

  unless (defined $res) {
    time_print("ignore $cnf, as empty content!");
    return 0;
  }

  # write res to cnf
  open my $fh, '>', $cnf or carp "open $cnf error: $!";
  return 0 unless defined $fh;

  eval {
    print $fh $res;
    close $fh;
  };
  if ($@) {
    carp "write $cnf error: $@";
    return 0;
  }

  return 1;
}

sub is_dir_empty {
  my $dir = shift;
  return 0 unless -d $dir;
  opendir (my $dh, $dir) or carp "failed to open $dir";

  my $num = 0;

  eval {
    READ: while (my $name = readdir($dh)) {
      $num++ if $name ne "." && $name ne "..";
      # should be skip if has file
      last READ if $num > 0;
    }
  };
  if ($@) {
    $num = 99; # unknown error
  }
  return $num == 0;
}

sub exec_system {
  my $cmd     = shift;
  my $log_out = shift;

  if ($log_out) {
    return  system_rc(system("$cmd >> $log_out 2>&1"));
  }
  else {
    return system_rc(system($cmd));
  }
}

sub exec_cmd_return {
  my $cmd  = shift;
  my $res;
  eval {
    $res = `$cmd`;
  };
  if ($@) {
    return "Err: $@";
  }
  chomp($res);
  return $res;
}

sub system_rc {
  my $rc   = shift;
  my $high = $rc >> 8;
  my $low  = $rc & 255;
  return ($high, $low);
}

sub is_tcp_port_open {
  my $host = shift;
  my $port = shift;

  my $fail = 0;
  my $socket = IO::Socket::INET->new(
    PeerAddr => $host,
    PeerPort => $port,
    Proto    => "TCP",
    Timeout  => 2
  ) || $fail++;

  if ($fail == 0) {
    return 1;
  }
  return 0;
}

# remove prefix and suffix quote
sub remove_psquote {
  my $msg = shift;
  return undef unless defined $msg;
  $msg =~ s/^(?:"|')|(?:"|')$//g;
  return $msg;
}

my @shell_escape_chars = (
  '"', '`', '\x27',
);

sub unescape_for_shell {
  my $str = shift;
  if ( !index( $str, '\\\\' ) ) {
    return $str;
  }
  foreach my $c (@shell_escape_chars) {
    my $x       = quotemeta($c);
    my $pattern = "\\\\(" . $x . ")";
    $str =~ s/$pattern/$1/g;
  }
  return $str;
}

sub escape_for_shell {
  my $str = shift;
  my $ret = "";
  foreach my $c ( split //, $str ) {
    my $x      = $c;
    my $escape = 0;
    foreach my $e (@shell_escape_chars) {
      if ( $e eq $x ) {
        $escape = 1;
        last;
      }
    }
    if ( $x eq "'" ) {
      $x =~ s/'/'\\''/;
    }
    if ( $x eq "\\" ) {
      $x = "\\\\";
    }
    if ($escape) {
      $x = "\\" . $x;
    }
    $ret .= "$x";
  }
  return $ret;
}

sub fuzzy_path {
  my $cmd = shift;
  $cmd =~ s/ /\ /gi;
  $cmd =~ s#//#/#gi;
  return $cmd;
}

sub get_dir_size {
  my $dir = shift;
  return 0 unless -d $dir;
  my $size = 0;
  find(sub { $size += -s if -f $_ }, $dir);
  return $size;
}

sub get_confd_list {
  my $dir = shift;
  $dir = dirname($dir) if -f $dir;
  return undef unless -d $dir;

  my @lists;
  find(
   sub {
     return unless -f;
     return unless /\.(?:cnf|conf|json|ini|yaml)$/i;
     push @lists, $File::Find::name;
   }, 
   $dir
  );
  return @lists;
}

sub _parse_server {
  my $line  = shift;
  my ($res) = ($line =~ /servers\s*=\s*\[(.+)\]/i);

  return undef unless defined $res;
  my @servers;
  foreach my $k (split(/,\s*/, $res)) {
    $k =~ s/'|"//g;
    push @servers, $k;
  }

  return @servers;
}

sub get_conf_servers {
  my $keys = shift;
  my $conf = shift;
  return undef unless -e $conf;

  my @servers;
  my $seen = 0;
  open my $cfg, '<', $conf or croak "open $conf error: $!";
  while (<$cfg>) {
    chomp;
    next if $_ =~ /^\s*#/;

    if ($_ =~ /^\s*\[/) {
      if ($_ =~ /$keys/) {
        $seen = 1;
      }
      else {
        $seen = 0;
      }
    }

    if ($seen == 1 && $_ =~ /^\s*servers/) {
      @servers = _parse_server($_);
      last;
    }
  }

  return @servers;
}

sub current_time {
  my $zone = shift || "Asia/Shanghai";
  local $ENV{TZ} = "$zone" if defined $zone;
  return strftime("%Y-%m-%d 00:00:00", localtime(time));
}

sub time_print {
  my $msg  = shift;

  my $timestr = 
        strftime("%Y-%m-%d %H:%M:%S", localtime(time));

  foreach my $k (split(/\n/, $msg)) {
    next if $k eq '';
    print "[$timestr] $k\n";
  }
}

sub parsecfg {
  # check the file
  my $file = shift;
  unless (-f $file) {
    time_print("no file or file is not exist");
    return undef;
  }

  # slurp in the file
  local $/ = undef;
  open CFG, '<', $file or croak "open $file error: $!";
  my $contents = <CFG>;
  close CFG;

  return _read_string($contents);
}

sub _read_string {
  return undef unless defined $_[0];

  # Parse the file
  my %outs;
  my $ns      = '_';
  my $counter = 0;
  foreach (split /(?:\015{1,2}\012|\015|\012)/, shift) {
    $counter++;

    # Skip comments and empty lines
    next if /^\s*(?:\#|\;|$)/;

    # Remove inline comments
    s/\s\;\s.+$//g;

    # Handle section headers
    if ( /^\s*\[\s*(.+?)\s*\]\s*$/ ) {
      # Create the sub-hash if it doesn't exist.
      # Without this sections without keys will not
      # appear at all in the completed struct.
      $outs{$ns = $1} ||= {};
      next;
    }

    # Handle properties
    if ( /^\s*([^=]+?)\s*=\s*(.*?)\s*$/ ) {
      $outs{$ns}->{$1} = $2;
      next;
    }
  }
  return \%outs;
}

1;

# ########################################################
# Disconf packages
# ########################################################
package Disconf;
use strict;
use warnings FATAL => 'all';
use English qw(-no_match_vars);  # Avoids regex performance penalty
use Utils;

sub new {
  my ($class, %args) = @_;
  my $self = {};
  $self->{update} = $args{update} || 0;
  return bless $self, $class;
}

sub is_support {
  my $self = shift;
  my $type = shift;

  my @lists = qw(memcached redis pika mysql mongodb postgresql dns_query megacli iptables);
  foreach my $k (@lists) {
    return 1 if $k eq $type;
  }
  return 0;
}

sub is_update {
  my $self = shift;
  if ($self->{update}) {
    return 1;
  }
  return 0;
}

sub is_in_list {
  my $self = shift;
  my $ref  = shift;
  my $port = shift;

  foreach my $k (keys %$ref) {
    return 1 if $ref->{$k} == $port;
  }
  return 0;
}

sub is_telegraf_alive {
  my $self = shift;

  my $pid  = Utils::exec_cmd_return("pidof telegraf");
  return 0 if length($pid) == 0;

  my $is_alive = kill 0, $pid;

  return $is_alive;
}

sub _get_file_mtime {
  my $file = shift;

  return 0 unless -e $file;
  my $mtime = (stat($file))[9];

  return $mtime;
}

sub _get_telegraf_stime {
  my $pid  = Utils::exec_cmd_return("pidof telegraf");
  my $file = "/proc/$pid/cmdline";

  return _get_file_mtime($file);
}

sub is_telegraf_conf_change {
  my $self = shift;
  my $path = shift;

  my $teletime  = _get_telegraf_stime();

  my @cnfs      = Utils::get_confd_list($path);
  foreach my $k (@cnfs) {
    next if $k =~ /discover/i;

    my $ft = _get_file_mtime($k);
    return 1 if $ft > $teletime;
  }

  return 0;
}

sub _get_host_ip {
  my $host = shift;
  my $ip = $host;

  if ($host =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/) {
    $ip = $host;
  }
  else {
    use Socket;
    my $temp = gethostbyname($host);
    if (defined $temp) {
      $ip = inet_ntoa($temp);
    }
    else {
      $ip = $host;
    }
  }

  return $ip;
}

sub is_graphite_connection_abnormal {
  my $self = shift;
  my $file = shift;

  my @servers = Utils::get_conf_servers("outputs.graphite", $file);
  my $n = @servers + 0;
  return 1 if $n == 0;

  my $res = Utils::exec_cmd_return("netstat -ntp");
  return 1 if $res =~ /^Err/;

  my $m = 0;
  foreach my $k (@servers) {
    my ($host, $port) = split(/:/, $k);
    my $ip = _get_host_ip($host);
    if ($res =~ /$ip:$port\s*ESTABLISHED/i) {
      $m++
    }
  }

  if ($n == $m) {
    return 0;
  }

  return 1;
}

sub get_server_list {
  my $self = shift;

  # we should convert programname to support type
  my %maps = (
    "memcached"    => "memcached",
    "redis-server" => "redis",
    "mongod"       => "mongodb",
    "mysqld"       => "mysql",
    "pika"         => "pika",
    "postgres"     => "postgresql",
    "postmaster"   => "postgresql",
  );

  # full lists
  my %results;

  # listen port lists
  my %listens;
  my $res = Utils::exec_cmd_return("netstat -tnlp");
  return undef if $res =~ /^Err/;

  foreach my $k (split(/\n/, $res)) {
    # filter non-db program
    next unless $k =~ m/(?:mysqld|memcached|redis-server|mongod|pika|postgres|postmaster)/i;
    my @items = split(/\s+/, $k, 7);

    local $_ = "$items[3] $items[-1]";
    if (m#.+:(\d+)\s+(\d+)/(.+?)(?:\s+|$)#i) {
      my $t = $maps{$3};
      next unless defined $t;
      $listens{$t}->{$2} = undef unless defined $listens{$t};
      next if (defined $listens{$t}->{$2} && $listens{$t}->{$2} =~ /\b$1\b/i);
      unless (defined $listens{$t}->{$2}) {
        $listens{$t}->{$2} = $1;
      }
      if (defined $listens{$t}->{$2} 
           && $listens{$t}->{$2} > $1) {
        $listens{$t}->{$2} = $1;
      }
    }
  }

  $results{listen} = \%listens;

  # non-listen lists
  $results{non_listen}->{dns_query} = {};
  $results{one_enable}->{megacli} = {};
  $results{one_enable}->{iptables} = {};

  return \%results;
}

sub disc_iptables {
  my $self = shift;
  my $secs = shift;

  my $temp = <<'TEMP_END';
# Gather packets and bytes throughput from iptables
[[inputs.iptables]]
  ## iptables require root access on most systems.
  ## Setting 'use_sudo' to true will make use of sudo to run iptables.
  ## Users must configure sudo to allow telegraf user to run iptables with no password.
  ## iptables can be restricted to list command "iptables -nvL" or "iptables -S".
  use_sudo = true
  ## Setting 'use_rule' to true to get ruleid result. default is true
  use_rule = false
  ## Setting 'use_lock' to true runs iptables with the "-w" option.
  ## Adjust your sudo settings appropriately if using this option ("iptables -w 5 -nvl")
  use_lock = false
  ## Define an alternate executable, such as "ip6tables". Default is "iptables".
  binary = "iptables"
  ## defines the table to monitor:
  table = "filter"
  ## defines the chains to monitor.
  ## NOTE: iptables rules without a comment will not be monitored when use_rule is true.
  ## Read the plugin documentation for more information.
  chains = [ "INPUT", "FORWARD" ]
TEMP_END

  return $temp;
}

sub disc_megacli {
  my $self = shift;
  my $secs = shift;

  my $temp = <<'TEMP_END';
# Read megacli's basic status information
# This canbe used in physical server.
[[inputs.megacli]]
  interval = "3600s"
  ## Optionally specify the path to the megacli executable
  path_megacli = "/usr/bin/MegaCli"

  ## Gather info of the following type:
  ## raid, disk, bbu
  ## default is gather all of the three type
  gather_type = ['disk', 'raid', 'bbu']

  ## On most platforms used cli utilities requires root access.
  ## Setting 'use_sudo' to true will make use of sudo to run MegaCli.
  ## Sudo must be configured to allow the telegraf user to run MegaCli
  ## without a password.
  use_sudo = true

  ## Timeout for the cli command to complete.
  timeout = "5s"
TEMP_END

  return $temp;
}

sub _parse_resolv {
  my $is_quote = shift;
  my $rs = "/etc/resolv.conf";

  return undef unless -r $rs;

  open my $fh, '<', $rs
     or return undef;

  my @servers;
  while(<$fh>) {
    next unless /^\s*nameserver\s+/i;
    my ($ser) = ($_ =~ /^\s*nameserver\s+(.+?)\s*$/i);
    $ser = '"' . $ser . '"' if defined $is_quote;
    push @servers, $ser if defined $ser;
  }

  return \@servers;
}

sub _replace_dns_query {
  my $temp = shift;
  my $secs = shift;

  my $servers = _parse_resolv(1);

  return undef if @$servers == 0;
  return undef unless Utils::is_tcp_port_open("wwww.baidu.com", 443);

  my $out = join(", ", @$servers);
  $temp =~ s/{{instances}}/$out/g;

  $secs->{domains} ||= 'www.baidu.com';
  my @domains = split(/,\s*/, $secs->{domains});
  my $ins_domains = join(", ", map { chomp; '"' . Utils::remove_psquote($_) . '"' } @domains);
  $temp =~ s/{{domains}}/$ins_domains/g;

  return $temp;
}

sub disc_dns_query {
  my $self = shift;
  my $secs = shift;

  my $temp = <<'TEMP_END';
# Query given DNS server and gives statistics
[[inputs.dns_query]]
  ## servers to query
  servers = [{{instances}}]

  ## Network is the network protocol name.
  network = "udp"

  ## Domains or subdomains to query.
  domains = [{{domains}}]

  ## Query record type.
  ## Possible values: A, AAAA, CNAME, MX, NS, PTR, TXT, SOA, SPF, SRV.
  record_type = "A"

  ## Dns server port.
  port = 53

  ## Query timeout in seconds.
  timeout = 2
TEMP_END

  return _replace_dns_query($temp, $secs);
}

sub _replace_memcached {
  my $temp  = shift;
  my $items = shift;

  my @servers;
  foreach my $k (@$items) {
    my $port = $k->{port};
    push @servers, '"' . '$IP' . ":" . $port . '"';
  }

  return undef if @servers == 0;

  my $out = join(", ", @servers);
  $temp =~ s/{{instances}}/$out/g;

  return $temp;
}

sub disc_memcached {
  my $self  = shift;
  my $items = shift;

  my $temp = <<'TEMP_END';
# Read metrics from one or many memcached servers
[[inputs.memcached]]
  ## An array of address to gather stats about. Specify an ip on hostname
  ## with optional port. ie localhost, 10.0.0.1:11211, etc.
  servers = [{{instances}}]
  # unix_sockets = ["/var/run/memcached.sock"]
TEMP_END

  return _replace_memcached($temp, $items);
}

sub _replace_mysql {
  my $temp  = shift;
  my $items = shift;

  my @servers;
  foreach my $k (@$items) {
    my $port = $k->{port};
    my $user = $k->{user};
    my $pass = $k->{pass};

    next if (!(defined $user) or !(defined $pass));

    my $dsn  = '"'
             . "$user" . ":" . "$pass"
             . '@' . "tcp"
             . "(" . '$IP' . ":" . "$port" . ")"
             . "/information_schema?tls=false"
             . '"';
    push @servers, $dsn;
  }
  
  return undef if @servers == 0;

  my $out = join(", ", @servers);
  $temp =~ s/{{instances}}/$out/g;

  return $temp;
}

sub disc_mysql {
  my $self  = shift;
  my $items = shift;

  my $temp = <<'TEMP_END';
# Read metrics from one or many mysql servers
[[inputs.mysql]]
  ## specify servers via a url matching:
  ##  [username[:password]@][protocol[(address)]]/[?tls=[true|false|skip-verify|custom]]
  ##  see https://github.com/go-sql-driver/mysql#dsn-data-source-name
  ##  e.g.
  ##    servers = ["user:passwd@tcp(127.0.0.1:3306)/?tls=false"]
  ##    servers = ["user@tcp(127.0.0.1:3306)/?tls=false"]
  #
  ## If no servers are specified, then localhost is used as the host.
  servers = [{{instances}}]

  ## Selects the metric output format.
  ##
  ## This option exists to maintain backwards compatibility, if you have
  ## existing metrics do not set or change this value until you are ready to
  ## migrate to the new format.
  ##
  ## If you do not have existing metrics from this plugin set to the latest
  ## version.
  ##
  ## Telegraf >=1.6: metric_version = 2
  ##           <1.6: metric_version = 1 (or unset)
  metric_version = 2

  ## if the list is empty, then metrics are gathered from all database tables
  # table_schema_databases = []

  ## gather metrics from INFORMATION_SCHEMA.TABLES for databases provided above list
  # gather_table_schema = false

  ## gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST
  gather_process_list = true

  ## gather user statistics from INFORMATION_SCHEMA.USER_STATISTICS
  gather_user_statistics = true

  ## gather auto_increment columns and max values from information schema
  # gather_info_schema_auto_inc = false

  ## gather metrics from INFORMATION_SCHEMA.INNODB_METRICS
  gather_innodb_metrics = true

  ## gather metrics from SHOW SLAVE STATUS command output
  gather_slave_status = true

  ## gather metrics from SHOW BINARY LOGS command output
  gather_binary_logs = true

  ## gather metrics from PERFORMANCE_SCHEMA.GLOBAL_VARIABLES
  gather_global_variables = true

  ## gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE
  gather_table_io_waits = false

  ## gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS
  gather_table_lock_waits = false

  ## gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE
  gather_index_io_waits = false

  ## gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS
  gather_event_waits = false

  ## gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME
  gather_file_events_stats = false

  ## gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST
  gather_perf_events_statements = false

  ## the limits for metrics form perf_events_statements
  # perf_events_statements_digest_text_limit = 120
  # perf_events_statements_limit = 250
  # perf_events_statements_time_limit = 86400

  ## gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_ACCOUNT_BY_EVENT_NAME
  # gather_perf_sum_per_acc_per_event         = false

  ## list of events to be gathered for gather_perf_sum_per_acc_per_event
  ## in case of empty list all events will be gathered
  # perf_summary_events                       = []

  ## Some queries we may want to run less often (such as SHOW GLOBAL VARIABLES)
  ##   example: interval_slow = "30m"
  interval_slow = "1m"
TEMP_END

  return _replace_mysql($temp, $items);
}

sub _replace_mongodb {
  my $temp  = shift;
  my $items = shift;

  my @servers;
  foreach my $k (@$items) {
    my $port = $k->{port};
    my $user = $k->{user};
    my $pass = $k->{pass};

    my $dsn;
    if (defined $user and defined $pass) {
      $dsn = '"'
           . "mongodb://"
           . "$user" . ":" . "$pass"
           . '@'
           . '$IP' . ":" . "$port"
           . '"';
    }
    else {
      $dsn = '"'
           . "mongodb://"
           . '$IP' . ":" . "$port"
           . '"';
    }

    push @servers, $dsn;
  }

  return undef if @servers == 0;

  my $out = join(", ", @servers);
  $temp =~ s/{{instances}}/$out/g;

  return $temp;
}

sub disc_mongodb {
  my $self  = shift;
  my $items = shift;

  my $temp = <<'TEMP_END';
# Read metrics from one or many MongoDB servers
[[inputs.mongodb]]
  ## An array of URLs of the form:
  ##   "mongodb://" [user ":" pass "@"] host [ ":" port]
  ## For example:
  ##   mongodb://user:auth_key@10.10.3.30:27017,
  ##   mongodb://10.10.3.33:18832,
  servers = [{{instances}}]

  ## When true, collect cluster status
  ## Note that the query that counts jumbo chunks triggers a COLLSCAN, which
  ## may have an impact on performance.
  # gather_cluster_status = true

  ## When true, collect per database stats
  # gather_perdb_stats = false

  ## When true, collect per collection stats
  # gather_col_stats = false

  ## List of db where collections stats are collected
  ## If empty, all db are concerned
  # col_stats_dbs = ["local"]

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false
TEMP_END

  return _replace_mongodb($temp, $items);
}

sub _replace_redis {
  my $temp  = shift;
  my $items = shift;

  my @servers;
  foreach my $k (@$items) {
    my $port = $k->{port};
    my $pass = _pass_url_encode($k->{pass});

    my $dsn;
    if (defined $pass) {
      $dsn = '"'
           . "tcp://"
           . ":" . "$pass" . '@'
           . '$IP' . ":" . "$port"
           . '"';
    }
    else {
      $dsn = '"'
           . "tcp://"
           . '$IP' . ":" . "$port"
           . '"';
    }

    push @servers, $dsn;
  }

  return undef if @servers == 0;

  my $out = join(", ", @servers);
  $temp =~ s/{{instances}}/$out/g;

  return $temp;
}

sub disc_redis {
  my $self  = shift;
  my $items = shift;

  my $temp = <<'TEMP_END';
# Read metrics from one or many redis servers
[[inputs.redis]]
  ## specify servers via a url matching:
  ##  [protocol://][:password]@address[:port]
  ##  e.g.
  ##    tcp://localhost:6379
  ##    tcp://:password@192.168.99.100
  ##    unix:///var/run/redis.sock
  ##
  ## If no servers are specified, then localhost is used as the host.
  ## If no port is specified, 6379 is used
  servers = [{{instances}}]

  ## Optional. Specify redis commands to retrieve values
  # [[inputs.redis.commands]]
  # command = ["get", "sample-key"]
  # field = "sample-key-value"
  # type = "string"

  ## specify server password
  # password = "s#cr@t%"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = true
TEMP_END

  return _replace_redis($temp, $items);
}

sub _replace_pika {
  my $temp  = shift;
  my $items = shift;

  my @servers;
  foreach my $k (@$items) {
    my $port = $k->{port};
    my $pass = $k->{pass};

    my $dsn;
    if (defined $pass) {
      $dsn = '"'
           . "tcp://"
           . ":" . "$pass" . '@'
           . '$IP' . ":" . "$port"
           . '"';
    }
    else {
      $dsn = '"'
           . "tcp://"
           . '$IP' . ":" . "$port"
           . '"';
    }

    push @servers, $dsn;
  }

  return undef if @servers == 0;

  my $out = join(", ", @servers);
  $temp =~ s/{{instances}}/$out/g;

  return $temp;
}

sub disc_pika {
  my $self  = shift;
  my $items = shift;

  my $temp = <<'TEMP_END';
# Read pika's basic status information
[[inputs.pika]]
  ## specify servers via a url matching:
  ##  [protocol://][:password]@address[:port]
  ##  e.g.
  ##    tcp://localhost:9221
  ##    tcp://:password@192.168.99.100
  ##
  ## If no servers are specified, then localhost is used as the host.
  ## If no port is specified, 9221 is used
  servers = [{{instances}}]
  ## Optional. Specify redis commands to retrieve values
  # [[inputs.pika.commands]]
  # command = ["get", "sample-key"]
  # field = "sample-key-value"
  # type = "string"

  ## specify server password
  # password = "s#cr@t%"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = true
TEMP_END

  return _replace_pika($temp, $items);
}

sub _replace_postgresql {
  my $temp  = shift;
  my $items = shift;

  my @servers;
  foreach my $k (@$items) {
    my $port = $k->{port};
    my $user = $k->{user};
    my $pass = $k->{pass};
    my $host = $k->{is_local} > 0
             ? 'localhost'
             : '$IP';

    my $dsn;
    if (defined $pass) {
      $dsn = '"'
           . "postgres://" . "$user"
           . ":" . "$pass" . '@'
           . "$host" . ":" . "$port"
           . "/postgres?sslmode=disable"
           . '"';
    }
    else {
      $dsn = '"'
           . "postgres://" . "$user" . "@"
           . "$host" . ":" . "$port"
           . "/postgres?sslmode=disable"
           . '"';
    }

    push @servers, $dsn;
  }

  return undef if @servers == 0;

  my $out = join(", ", @servers);
  $temp =~ s/{{instances}}/$out/g;

  if ($items->[0]->{is_local} > 0) {
    $temp =~ s/{{is_local}}//g;
  }
  else {
    $temp =~ s/{{is_local}}/# /g;
  }

  return $temp;
}

sub disc_postgresql {
  my $self  = shift;
  my $items = shift;

  my $temp = <<'TEMP_END';
# Read metrics from one or many postgresql servers
[[inputs.postgresql_extensible]]
  ## specify address via a url matching:
  ##   postgres://[pqgotest[:password]]@localhost[/dbname]\
  ##       ?sslmode=[disable|verify-ca|verify-full]
  ## or a simple string:
  ##   host=localhost user=pqgotest password=... sslmode=... dbname=app_production
  ##
  ## All connection parameters are optional.
  ##
  servers = [{{instances}}]

  ## A custom name for the database that will be used as the "server" tag in the
  ## measurement output, and we'll add port to the outputaddress by default.
  ## If not specified, the connection host and port are used.
  {{is_local}}outputaddress = '$IP'

  ## connection configuration.
  ## maxlifetime - specify the maximum lifetime of a connection.
  ## default is forever (0s)
  max_lifetime = "0s"

  ## A  list of databases to explicitly ignore.  If not specified, metrics for all
  ## databases are gathered.  Do NOT use with the 'databases' option.
  ignored_databases = ["postgres", "template0", "template1"]

  ## Define the toml config where the sql queries are stored
  ## Define the toml config where the sql queries are stored
  ## New queries can be added, if the withdbname is set to true and there is no
  ## databases defined in the 'databases field', the sql query is ended by a
  ## 'is not null' in order to make the query succeed.

  [[inputs.postgresql_extensible.query]]
    sqlquery="SELECT * FROM pg_stat_database WHERE datname"
    version=901
    withignoredbname=true
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="SELECT * FROM pg_stat_bgwriter"
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="""
      select
        case when setting = 'on' then 1 when setting = 'off' then 0 else -1 end as autovacuum
      from pg_settings
      where name='autovacuum'
    """
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="select setting::INTEGER as shared_buffers from pg_settings where name = 'shared_buffers'"
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="select setting::INTEGER as wal_buffers from pg_settings where name = 'wal_buffers'"
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="select (setting::integer * pg_size_bytes(unit)) as max_wal_size from pg_settings where name = 'max_wal_size'"
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="select setting::INTEGER as effective_cache_size from pg_settings where name = 'effective_cache_size'"
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="select setting::INTEGER as work_mem from pg_settings where name = 'work_mem'"
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="select setting::INTEGER as max_connections from pg_settings where name = 'max_connections'"
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="""
       SELECT substring(version(), 12, 6) as version,
              round(extract(epoch from current_timestamp - pg_postmaster_start_time())) as uptime,
              case
                when pg_is_in_recovery() = 't' then 'slave'
                when pg_is_in_recovery() = 'f' and (select char_length(application_name) from pg_stat_replication) > 0 then 'master'
                when (select char_length(application_name) from pg_stat_replication) is null then 'standby'
              end as role
    """
    version=901
    withignoredbname=false
    tagvalue="version,role"

  [[inputs.postgresql_extensible.query]]
    sqlquery="""
      SELECT application_name, client_addr,
          (case state when 'stopping' then 0 when 'startup' then 1 when 'catchup' then 2 when 'streaming' then 3 when 'backup' then 4 else 9 end) AS repl_state,
          (case pg_is_in_recovery() when 't' then null else pg_xlog_location_diff(pg_current_xlog_location(), replay_location)::float end) AS pg_xlog_location_diff
      FROM pg_stat_replication
    """
    version=901
    withignoredbname=false
    tagvalue="application_name,client_addr"

  [[inputs.postgresql_extensible.query]]
    sqlquery="""
      SELECT
        CASE WHEN pg_is_in_recovery() = 't' THEN
           CASE WHEN pg_last_xlog_receive_location() = pg_last_xlog_replay_location() THEN 0 ELSE EXTRACT (EPOCH FROM now() - pg_last_xact_replay_timestamp()) END
        END AS lag
    """
    version=901
    withignoredbname=false
    tagvalue=""

  [[inputs.postgresql_extensible.query]]
    sqlquery="""
        SELECT pg_database.datname as db, tmp.mode as lock_mode, COALESCE(count,0) as lock_count
         FROM
        (
            VALUES ('accesssharelock'),
                   ('rowsharelock'),
                   ('rowexclusivelock'),
                   ('shareupdateexclusivelock'),
                   ('sharelock'),
                   ('sharerowexclusivelock'),
                   ('exclusivelock'),
                   ('accessexclusivelock'),
                   ('sireadlock')
         ) AS tmp(mode) CROSS JOIN (select *, oid from pg_database where datname NOT IN ('postgres', 'template0', 'template1')) AS pg_database
         LEFT JOIN
         (SELECT database, lower(mode) AS mode,count(*) AS count
           FROM pg_locks WHERE database IS NOT NULL
           GROUP BY database, lower(mode)
         ) AS tmp2
         ON tmp.mode=tmp2.mode and pg_database.oid = tmp2.database ORDER BY 1
    """
    version=901
    withignoredbname=false
    tagvalue="db,lock_mode"

  [[inputs.postgresql_extensible.query]]
    sqlquery="""
      SELECT
        pg_database.datname as db, TRANSLATE(tmp.state, ' ()', '_') as state, COALESCE(count,0) as tx_count, COALESCE(max_tx_duration,0) as max_tx_duration
      FROM
      (
        VALUES ('active'),
           ('idle'),
           ('idle in transaction'),
           ('idle in transaction (aborted)'),
           ('fastpath function call'),
           ('disabled')
      ) AS tmp(state) CROSS JOIN (select * from pg_database where datname NOT IN ('postgres', 'template0', 'template1')) AS pg_database
      LEFT JOIN
      (
        SELECT
          datname, state, count(*) AS count,
          MAX(EXTRACT(EPOCH FROM now() - xact_start))::float AS max_tx_duration
        FROM pg_stat_activity GROUP BY datname,state) AS tmp2
          ON tmp.state = tmp2.state AND pg_database.datname = tmp2.datname;
    """
    version=901
    withignoredbname=false
    tagvalue="db,state"

TEMP_END

  return _replace_postgresql($temp, $items);
}

sub temp_outs {
  my $self  = shift;
  my $type  = shift;
  my $items = shift;

  my %select_func;
  if (ref($items) eq 'ARRAY') {
    %select_func = (
      'memcached' => $self->disc_memcached($items),
      'mysql'     => $self->disc_mysql($items),
      'mongodb'   => $self->disc_mongodb($items),
      'redis'     => $self->disc_redis($items),
      'pika'      => $self->disc_pika($items),
      'postgresql'=> $self->disc_postgresql($items),
    );
  }

  if (ref($items) eq 'HASH') {
    $select_func{'dns_query'} = $self->disc_dns_query($items);
  }

  if (ref($items) eq '') {
    $select_func{'dns_query'} = $self->disc_dns_query();
  }

  $select_func{'megacli'}   = $self->disc_megacli();
  $select_func{'iptables'}  = $self->disc_iptables();

  return $select_func{$type};
}

sub gen_conf_for_listen {
  my $self   = shift;
  my $confd  = shift;
  my $type   = shift;
  my $res    = shift;
  my $secs   = shift;

  return undef unless $self->is_support($type);

  my @items;
  my @ports;

  my @ignore_ports = split(/,\s*/, $secs->{ignore} || '');
  foreach my $p (keys %$res) {
    my $port = $res->{$p};
    next if _is_in_array($port, \@ignore_ports);

    my $user = $secs->{user} || undef;
    my $pass = $secs->{$port} || $secs->{pass} || undef;
    my $is_local = $secs->{is_local} || 0;

    if ($type eq 'mysql') {
      if (!defined($user) || !defined($pass)) {
        Utils::time_print("ignore $type: $port. must set user and pass for $type");
	next;
      }
    }

    if ($type eq 'postgresql') {
      if (!defined($user)) {
        Utils::time_print("ignore $type: $port. must set user for $type");
	next;
      }
    }

    push @ports, $port;
    push @items, {port => $port, user => $user, pass => $pass, is_local => $is_local};
  }

  # create conf file
  $confd  .= "/" unless $confd =~ m|/$|i;
  my $cnf = $type eq 'postgresql'
          ? $confd . "$type" . "_extensible" . "-" . "auto" . ".conf"
          : $confd . "$type" . "-" . "auto" . ".conf";

  # get current monitor port list and compare
  my @cur_ports = _get_monitor_ports($cnf);
  my $comp_diff = _diff_compare(\@ports, \@cur_ports, \@ignore_ports);

  my $counter = @{$comp_diff->{add}} + @{$comp_diff->{del}};
  if ($counter > 0) {
    _diff_print($type, $comp_diff);
    if ($self->is_update()) {
      my $outs = $self->temp_outs($type, \@items);
      # force overwrite cnf file
      if (Utils::create_cnf_if($cnf, $outs, 1)) {
        Utils::time_print("generate $cnf ok.");
      }
    }
  }

  return $counter;
}

sub _parse_ports {
  my $line = shift;
  my @servers = ($line =~ m/(?:\$IP|127.0.0.1|localhost):(\d+)/gi);
  return @servers;
}

sub _get_monitor_ports {
  my $conf  = shift;
  my $fetch = _get_fetch_line($conf, "servers");

  return () unless defined $fetch;
  return _parse_ports($fetch);
}

sub _non_listen_parse_func {
  my $type = shift;

  my %select_funcs = (
    'dns_query' => _parse_resolv(), # return array hash
  );

  return $select_funcs{$type};
}

sub gen_conf_for_non_listen {
  my $self  = shift;
  my $confd = shift;
  my $type  = shift;
  my $secs  = shift;

  return 0 unless $self->is_support($type);

  my $used_servers = _non_listen_parse_func($type);
  return 0 unless defined $used_servers;

  # create conf file
  $confd .= "/" unless $confd =~ m|/$|i;
  my $cnf = $confd . "$type" . "-" . "auto" . ".conf";


  # get current server lists
  my $curr_servers = _get_monitor_servers($cnf);

  my $comp_diff = _diff_compare($used_servers, $curr_servers);
  my $counter   = @{$comp_diff->{add}} + @{$comp_diff->{del}};

  if ($type eq 'dns_query') {
    if (defined($secs->{ignore}) && $secs->{ignore} > 0) {
      Utils::time_print("ignore dns_query.");
      if (-w $cnf) {
        Utils::time_print("will delete $cnf file");
        unlink $cnf if $self->is_update();
        return 1;
      }
      return 0;
    }

    if (defined($secs->{domains})) {
      my @used_domain = map { Utils::remove_psquote($_) } split(/,\s*/, $secs->{domains});
      my $curr_domain = _get_dns_domains($cnf);
      my $comp_domain = _diff_compare(\@used_domain, $curr_domain);
      
      $counter += @{$comp_domain->{add}} + @{$comp_domain->{del}};
      _diff_print($type, $comp_domain) if $counter > 0;
    }
  }

  if ($counter > 0) {
    _diff_print($type, $comp_diff);
    if ($self->is_update()) {
      my $outs = $self->temp_outs($type, $secs);
      # force overwrite cnf file
      if (Utils::create_cnf_if($cnf, $outs, 1)) {
        Utils::time_print("generate $cnf ok.");
      }
      else {
        $counter = 0; # reset to 0
      }
    }
  }

  return $counter;
}

sub _parse_servers {
  my $fetch = shift;
  my @servers;

  my ($line) = ($fetch =~ m/=\s*\[(.+)\]\s*$/i);
  foreach my $k (split(/,\s*/, $line)) {
    $k =~ s/'|"//g;
    push @servers, $k;
  }

  return @servers;
}

sub _get_dns_domains {
  my $conf = shift;

  my $fetch = _get_fetch_line($conf, "domains");

  return () unless defined $fetch;
  my @domains = _parse_servers($fetch);

  return \@domains;
}

sub _get_monitor_servers {
  my $conf = shift;

  my $fetch = _get_fetch_line($conf, "servers");

  return () unless defined $fetch;
  my @servers = _parse_servers($fetch);

  return \@servers;
}

sub _one_enable_white {
  my $type = shift;

  return 1 if $type eq 'iptables';

  return 0;
}

sub gen_conf_for_one_enable {
  my $self  = shift;
  my $confd = shift;
  my $type  = shift;
  my $secs  = shift;

  return 0 unless $self->is_support($type);

  $confd .= "/" unless $confd =~ m|/$|i;
  my $cnf = $confd . "$type" . "-" . "auto" . ".conf";

  my $counter = 0;

  $secs->{ignore} ||= 0 if _one_enable_white($type);

  if (defined($secs->{ignore})) {
    if ($secs->{ignore} > 0) {
      if (-w $cnf) {
        Utils::time_print("ignore $type. will del $cnf");
        if ($self->is_update()) {
          unlink $cnf;
          return 1;
        }
        return 0;
      }
    }
    else {
      if (-e $cnf) {
        # Utils::time_print("already generate $cnf");
        $counter = 0;
      }
      else {
        Utils::time_print("generate $cnf");
	$counter = 1;
      }
    }
  }

  if ($counter > 0) {
    if ($self->is_update()) {
      my $outs = $self->temp_outs($type, $secs);
      # force overwrite cnf file
      if (Utils::create_cnf_if($cnf, $outs, 1)) {
        Utils::time_print("generate $cnf ok.");
      }
      else {
        $counter = 0; # reset to 0
      }
    }
  }
  return $counter;
}

sub _get_fetch_line {
  my $conf = shift;
  my $match= shift;

  return undef unless -r $conf;
  open my $fh, '<', $conf or return undef;

  my $fetch;
  while(<$fh>) {
    chomp;
    if (/^\s*$match\s*=/i) {
      $fetch = $_;
      last;
    }
  }

  close $fh;

  return $fetch;
}

sub _diff_print {
  my $type = shift;
  my $diff = shift;
  foreach my $t (keys %$diff) {
    next unless defined $diff->{$t}->[0];
    my $list = join(", ", @{$diff->{$t}});
    Utils::time_print("will $t $type:  $list")
  }
}

sub _is_in_array {
  my $port = shift;
  my $ref  = shift;

  return 0 unless defined $ref;

  foreach my $k (@$ref) {
    return 1 if $k eq $port;
  }
  return 0;
}

sub _diff_compare {
  my $r1 = shift;
  my $r2 = shift;
  my $no = shift; # ignore list

  my %diff = (
    add => [],
    del => [],
  );

  return \%diff if (!defined $r1 && !defined $r2);

  foreach my $k (@$r1) {
    next if _is_in_array($k, $no);
    push @{$diff{add}}, $k unless _is_in_array($k, $r2);
  }
  foreach my $k (@$r2) {
    push @{$diff{del}}, $k if _is_in_array($k, $no);
    push @{$diff{del}}, $k unless _is_in_array($k, $r1);
  }

  return \%diff;
}

sub _pass_url_encode {
  my $pass  = shift;
  return $pass unless defined $pass;

  my %metas = (
    '%' => '%25', '`' => '%60',
    '^' => '%5e', '$' => '%24',
    '!' => '%21', '[' => '%5b',
    ']' => '%5d', '<' => '%3c',
    '>' => '%3e', '/' => '%2f',
    '?' => '%3f', '"' => '%22',
  );

  my $newpass;
  foreach my $k (split(//, $pass)) {
    my $str = $metas{$k} || $k;
    $newpass .= $str;
  }

  return $newpass;
}

1;
